{"version":3,"sources":["components/UI/Loader/Loader.module.css","components/Posts/PostList/PostsItem/PostPageId/PostPageId.module.css","components/UI/Buttons/myButton.module.css","components/UI/Inputs/myInput.module.css","components/UI/Select/MySelect.module.css","components/Posts/PostList/PostsItem/PostsItem.module.css","components/Posts/PostList/PostList.module.css","components/UI/Modals/MyModal.module.css","components/UI/Navbar/Navbar.module.css","components/App/Error.module.css","components/API/postsAPI.tsx","components/hooks/useFetching.tsx","components/UI/Loader/Loader.tsx","components/Posts/PostList/PostsItem/PostPageId/PostPageId.tsx","components/hooks/usePosts.tsx","components/UI/Buttons/myButton.tsx","components/UI/Inputs/myInput.tsx","components/Posts/PostForm/PostForm.tsx","components/UI/Select/MySelect.tsx","components/Posts/PostList/PostFilter.tsx","components/Posts/PostList/PostsItem/PostsItem.tsx","components/Posts/PostList/PostList.tsx","components/UI/Modals/MyModal.tsx","components/utils/Paginator.tsx","components/Posts/Posts.tsx","components/hooks/useObserver.tsx","components/UI/Navbar/Navbar.tsx","components/App/About.tsx","components/App/Error.tsx","components/App/AppRouter.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","postsAPI","limit","page","axios","get","params","_limit","_page","response","id","console","log","useFetching","callback","useState","isLoading","setIsLoading","error","setError","a","message","style","require","Loader","className","loader","PostPageId","post","setPost","comments","setComments","useParams","fetchPostId","data","isLoadingId","errorId","fetchPostsId","fetchComments","isLoadingCom","useEffect","head","title","body","map","comment","email","usePosts","sort","posts","query","sortedPosts","useMemo","b","localeCompare","useSortedPosts","filter","toLowerCase","includes","MyButton","props","children","rest","myBtn","MyInput","myInp","PostForm","newPost","setNewPost","Date","now","errorStyle","border","type","value","onChange","e","target","placeholder","onClick","length","setActive","createPost","MySelect","options","defaultValue","currentTarget","disabled","option","name","PostFilter","setFilter","selectedSort","PostsItem","history","useHistory","TransitionGroup","CSSTransition","timeout","classNames","buttons","push","removePost","PostList","postList","MyModal","active","event","modal","stopPropagation","modalItems","Pagination","buttonStyle","margin","minWidth","activeButton","color","background","pages","i","totalPages","setPage","getPagesCount","totalCount","Math","ceil","Posts","activeModal","setActiveModal","setPosts","setTotalPages","lastElement","useRef","fetchPosts","headers","isPostsLoading","ref","canLoad","observer","current","IntersectionObserver","entries","isIntersecting","observe","useObserver","then","res","thisPost","height","backgroundColor","Navbar","navbar","to","About","textAlign","ErrorSite","src","AppRouter","path","exact","Error","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b31cf710.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loader_loader__3byf3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"head\":\"PostPageId_head__2nuW4\",\"error\":\"PostPageId_error__2uhWy\",\"comments\":\"PostPageId_comments__3qeaF\",\"comment\":\"PostPageId_comment__1V9B5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myBtn\":\"myButton_myBtn__39KlM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myInp\":\"myInput_myInp__2CJ6Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sort\":\"MySelect_sort__2ywhj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"PostsItem_post__ssCXr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postList\":\"PostList_postList__1PbSF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"MyModal_modal__2B9Fv\",\"modalItems\":\"MyModal_modalItems__3yBdi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__1qw7c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Error_error__7LbC4\"};","import axios from \"axios\"\r\n\r\nexport  class postsAPI{\r\n    static async  fetchPosts(limit:number,page:number){\r\n        let response=await axios.get('https://jsonplaceholder.typicode.com/posts',{\r\n            params:{\r\n                _limit:limit,\r\n            _page:page\r\n            }\r\n        })\r\n        return response\r\n        }\r\n    static async fetchPostId(id:string){\r\n        let response = await axios.get(`https://jsonplaceholder.typicode.com/posts/${id}`)\r\n        return response\r\n    }\r\n    static async fetchComments(id:string){\r\n        let response = await axios.get(`https://jsonplaceholder.typicode.com/posts/${id}/comments`)\r\n        console.log(response);\r\n        return response\r\n    }\r\n    \r\n}","import { useState } from \"react\"\r\n\r\nexport const useFetching = (callback:(...args:any)=>any) =>{\r\n    let [isLoading,setIsLoading] = useState(true)\r\n    let [error,setError] = useState('')\r\n      async function fetchPosts(...args:any){\r\n          try{\r\n        setIsLoading(true)\r\n        await callback(...args)\r\n          }\r\n           catch(e:any){\r\n             setError(e.message) \r\n           }\r\n           finally{\r\n            setIsLoading(false)\r\n           }\r\n        }\r\n        return [isLoading,error,fetchPosts]\r\n}","const style = require('./Loader.module.css')\r\n\r\nexport const Loader = () =>{\r\n   return <div className={style.loader}>\r\n\r\n    </div>\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { postsAPI } from \"../../../../API/postsAPI\";\r\nimport { useFetching } from \"../../../../hooks/useFetching\";\r\nimport { Loader } from \"../../../../UI/Loader/Loader\";\r\n\r\nconst style = require(\"./PostPageId.module.css\");\r\n\r\ntype ParamsType = {\r\n  id: string;\r\n};\r\ntype PostsType = {\r\n  title: string;\r\n  body: string;\r\n};\r\ntype CommentsType = {\r\n  email: string;\r\n  body: string;\r\n};\r\n\r\nconst PostPageId = () => {\r\n  let [post, setPost] = useState<PostsType>();\r\n  let [comments, setComments] = useState<Array<CommentsType>>([]);\r\n  let params = useParams<ParamsType>();\r\n  console.log(params);\r\n\r\n  let [isLoadingId, errorId, fetchPostsId] = useFetching(async () => {\r\n    const response = await postsAPI.fetchPostId(params.id);\r\n    setPost(response.data);\r\n  });\r\n  let [isLoadingCom, errorCom, fetchComments] = useFetching(async () => {\r\n    const response = await postsAPI.fetchComments(params.id);\r\n    setComments(response.data);\r\n  });\r\n  useEffect(() => {\r\n    //@ts-ignore\r\n    fetchPostsId();\r\n    //@ts-ignore\r\n    fetchComments();\r\n  }, []);\r\n  return (\r\n    <div >\r\n      <div className={style.head}>\r\n        Это страница под номером {params.id}\r\n        <h2 className={style.error}>{errorId ? errorId : \"\"}</h2>\r\n        {isLoadingId ? (\r\n          <Loader />\r\n        ) : (\r\n          <div>\r\n            <h4>Название</h4>\r\n            {post?.title}\r\n            <div className={style.body}>\r\n              <h5>Содержание</h5>\r\n              {post?.body}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n      {isLoadingCom ? (\r\n        <Loader />\r\n      ) : (\r\n        <div className={style.comments}>\r\n          {comments.map((comment) => (\r\n            <div className={style.comment}>\r\n              {comment.email} прокоментировал:\r\n              <div>{comment.body}</div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default PostPageId;\r\n","import { useMemo } from \"react\";\r\nimport { PostType } from \"../Posts/Posts\";\r\n\r\nexport const useSortedPosts = (sort: string, posts: Array<PostType>) => {\r\n  const sortedPosts = useMemo(() => {\r\n    if (sort) {\r\n      return [...posts].sort((a, b) => a[sort].localeCompare(b[sort]));\r\n    }\r\n\r\n    return posts;\r\n  }, [sort, posts]);\r\n  return sortedPosts;\r\n};\r\n\r\nexport const usePosts = (\r\n  sort: string,\r\n  posts: Array<PostType>,\r\n  query: string\r\n) => {\r\n  const sortedPosts = useSortedPosts(sort, posts);\r\n\r\n  const sortAndSearchPosts = useMemo(() => {\r\n   \r\n      return sortedPosts.filter((post) =>\r\n        post.title.toLowerCase().includes(query.toLowerCase())\r\n      );\r\n  }, [query, sortedPosts]);\r\n  return sortAndSearchPosts;\r\n};\r\n","const style = require('./myButton.module.css') \r\n\r\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {}\r\n\r\nexport function MyButton(props: ButtonProps): React.ReactElement<ButtonProps> {\r\n    const { children, ...rest } = props;\r\n    return (\r\n        <button\r\n        className={style.myBtn}\r\n            {...rest}\r\n        >\r\n            {children}\r\n        </button>\r\n    );\r\n}","const style = require(\"./myInput.module.css\");\r\n\r\ninterface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {}\r\n\r\nexport function MyInput(props: InputProps): React.ReactElement<InputProps> {\r\n  const { children, ...rest } = props;\r\n  return (\r\n    <input className={style.myInp} {...rest}>\r\n      {children}\r\n    </input>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { PostType } from \"../Posts\";\r\nimport { MyButton } from \"../../UI/Buttons/myButton\";\r\nimport { MyInput } from \"../../UI/Inputs/myInput\";\r\ntype PostFormPropsType = {\r\n  setActive: (active: boolean) => void;\r\n  createPost: (newPost: PostType) => void;\r\n};\r\nexport const PostForm: React.FC<PostFormPropsType> = (props) => {\r\n  let [newPost, setNewPost] = useState({ title: \"\", body: \"\" });\r\n  let [error, setError] = useState<boolean>(false);\r\n  let post = {\r\n    ...newPost,\r\n    id: Date.now(),\r\n  };\r\n  const addPost = () => {\r\n    setError(true);\r\n    if (newPost.title.length !== 0 && newPost.body.length !== 0) {\r\n      props.setActive(false)\r\n      setError(false);\r\n      setNewPost({ title: \"\",body: \"\" });\r\n      props.createPost(post);\r\n    }\r\n  };\r\n  const errorStyle = {\r\n    border: error ? \"1px solid red\" : \"1px solid black\",\r\n    \r\n  };\r\n  return (\r\n    <div>\r\n      <MyInput\r\n        type=\"text\"\r\n        style={errorStyle}\r\n        value={newPost.title}\r\n        onChange={(e) => setNewPost({ ...newPost, title: e.target.value })}\r\n        placeholder={error ? \"name post not found\" : \"name post\"}\r\n      />\r\n\r\n      <MyInput\r\n        type=\"text\"\r\n        style={errorStyle}\r\n        value={newPost.body}\r\n        onChange={(e) =>\r\n          setNewPost({ ...newPost, body: e.target.value })\r\n        }\r\n        placeholder={error ? \"description post not found\" : \"description post\"}\r\n      />\r\n      <MyButton onClick={addPost}>add post</MyButton>\r\n    </div>\r\n  );\r\n};\r\n","const style = require(\"./MySelect.module.css\");\r\ntype SelectType={\r\n  defaultValue:string\r\n  options:Array<OptionsType>\r\n  value:string\r\n  onChange:(value:string)=>void\r\n}\r\ntype OptionsType = {\r\n  value:string\r\n  name:string\r\n};\r\n\r\nexport const MySelect: React.FC<SelectType> = ({options,defaultValue,value,onChange}) => {\r\n  return (\r\n    <select value={value}  onChange={e=>onChange(e.currentTarget.value)} className={style.sort}>\r\n      <option  disabled value={''}>{defaultValue}</option>\r\n      {options.map(option => (\r\n        <option key={option.value} value={option.value}>{option.name}</option>\r\n      ))}\r\n    </select>\r\n  );\r\n};\r\n","import React from \"react\"\r\nimport { FilterType } from \"../Posts\"\r\nimport { MyInput } from \"../../UI/Inputs/myInput\"\r\nimport { MySelect } from \"../../UI/Select/MySelect\"\r\ntype PostFilterType = {\r\nfilter:FilterType\r\nsetFilter:(filter:FilterType)=>void\r\n}\r\n\r\nexport const PostFilter:React.FC<PostFilterType> = ({filter,setFilter}) =>{\r\nreturn <div>\r\n<MyInput\r\n        placeholder={\"Поиск\"}\r\n        value={filter.query}\r\n        onChange={(e) => setFilter({...filter,query:e.currentTarget.value})}\r\n      />\r\n      <MySelect\r\n        value={filter.sort}\r\n        onChange={selectedSort=>setFilter({...filter,sort:selectedSort})}\r\n        defaultValue={\"Sort\"}\r\n        options={[\r\n          { value: \"name\", name: \"alphabetically\" },\r\n          { value: \"description\", name: \"by content\" },\r\n        ]}\r\n      />\r\n</div>\r\n}","import React from \"react\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport { PostType } from \"../../Posts\";\r\nimport { MyButton } from \"../../../UI/Buttons/myButton\";\r\nimport './../../../../styles/styles.css'\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nconst style = require(\"./PostsItem.module.css\");\r\n\r\n\r\ntype PostsType = {\r\n  removePost: (post: PostType) => void;\r\n  posts: Array<PostType>;\r\n};\r\nexport const PostsItem: React.FC<PostsType> = (props) => {\r\n  let history = useHistory()\r\n  console.log(history)\r\n  return (\r\n    \r\n      <div>\r\n        <TransitionGroup>\r\n        {props.posts.map((post) => (\r\n          <CSSTransition key={post.id} timeout={300} classNames={'post'}>\r\n            <div>\r\n              <div className={style.post}>\r\n                <strong>\r\n                  {post.id}.{post.title}\r\n                </strong>\r\n                {post.body}\r\n              </div>\r\n              <div className={style.buttons}>\r\n              <MyButton onClick={()=> history.push(`/posts/${post.id}`)}>Открыть пост</MyButton>\r\n              <MyButton onClick={() => props.removePost(post)}>\r\n                Удалить\r\n              </MyButton>\r\n              </div>\r\n            </div>\r\n            </CSSTransition>\r\n        ))}\r\n        </TransitionGroup>\r\n      </div>\r\n  );\r\n};\r\n","import { PostType } from \"../Posts\";\r\nimport { PostsItem } from \"./PostsItem/PostsItem\";\r\n\r\nconst style = require(\"./PostList.module.css\");\r\n\r\n\r\ntype PostListType = {\r\n  removePost:(post:PostType)=>void\r\n  posts: Array<PostType>\r\n  title: string;\r\n};\r\n\r\nexport const PostList: React.FC<PostListType> = (props) => {\r\n  return (\r\n    <div className={style.postList}>\r\n      {props.posts.length?<h1>{props.title}</h1>:<h1>Posts not found</h1>}\r\n      <PostsItem removePost={props.removePost} posts={props.posts} />  \r\n    </div>\r\n  );\r\n};\r\n","const style = require(\"./MyModal.module.css\");\r\n\r\ntype MyModalType = {\r\n  children: any;\r\n  active: boolean;\r\n  setActive: (active: boolean) => void;\r\n};\r\n\r\nexport const MyModal: React.FC<MyModalType> = ({\r\n  children,\r\n  active,\r\n  setActive,\r\n}) => {\r\n    const activeModal = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) =>{\r\n        setActive(!active)\r\n    }\r\n  return (\r\n    <div onClick={activeModal}  className={style.modal}>\r\n      <div  onClick={event=>event.stopPropagation()}className={style.modalItems}>{children}</div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\"\r\nimport { MyButton } from \"../UI/Buttons/myButton\"\r\ntype PaginatorType = {\r\n  totalPages:number,\r\n  page:number\r\n  setPage:(page:number)=>void\r\n}\r\n\r\n\r\nexport const Pagination:React.FC<PaginatorType> = (props) =>{\r\n  const buttonStyle={\r\n    margin:'5px',\r\n    minWidth:'50px'\r\n  }\r\n  const activeButtonStyle = {\r\n    color:'darkorchid',\r\n    background:'white'\r\n  }\r\n  const activeButton={...buttonStyle,...activeButtonStyle}\r\n    let pages = []\r\n        for (let i = 1; i <= props.totalPages; i++) {\r\n          pages.push(i)\r\n        }\r\n    return <div>\r\n        {pages.map((page) => (\r\n        <MyButton\r\n        style={props.page===page?activeButton:buttonStyle}\r\n          key={page}\r\n          onClick={() => {\r\n            props.setPage(page);\r\n          }}\r\n        >\r\n          {page}\r\n        </MyButton>\r\n      ))}\r\n    </div>\r\n}   \r\n\r\nexport const getPagesCount = (totalCount:number,limit:number) =>{\r\n    return Math.ceil(totalCount/limit)\r\n      }\r\n      \r\n\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport \"./Posts.css\";\r\nimport { postsAPI } from \"../API/postsAPI\";\r\nimport { useFetching } from \"../hooks/useFetching\";\r\nimport { usePosts } from \"../hooks/usePosts\";\r\nimport { PostForm } from \"./PostForm/PostForm\";\r\nimport { PostFilter } from \"./PostList/PostFilter\";\r\nimport { PostList } from \"./PostList/PostList\";\r\nimport { MyButton } from \"../UI/Buttons/myButton\";\r\nimport { Loader } from \"../UI/Loader/Loader\";\r\nimport { MyModal } from \"../UI/Modals/MyModal\";\r\nimport { getPagesCount, Pagination } from \"../utils/Paginator\";\r\nimport { useObserver } from \"../hooks/useObserver\";\r\n\r\nexport type PostType = {\r\n  [key: string]: any;\r\n  id: number;\r\n  title: string;\r\n  body: string;\r\n};\r\nexport type FilterType = {\r\n  sort: string;\r\n  query: string;\r\n};\r\n\r\nfunction Posts() {\r\n  let [activeModal, setActiveModal] = useState<boolean>(false);\r\n  let [filter, setFilter] = useState<FilterType>({ sort: \"\", query: \"\" });\r\n  let [posts, setPosts] = useState<Array<PostType>>([]);\r\n  let [totalPages, setTotalPages] = useState<number>(0);\r\n  let [limit,setLimit] = useState<number>(10)\r\n  let [page, setPage] = useState<number>(1);\r\n  let lastElement = useRef<any>()\r\n  console.log(lastElement);\r\n  const sortedPosts = usePosts(filter.sort, posts, filter.query);\r\n  let  [isPostsLoading, error, fetchPosts] = useFetching(async (limit,page) => {\r\n    const response = await postsAPI.fetchPosts(limit, page);\r\n    setPosts(response.data);\r\n    let totalCount = response.headers[\"x-total-count\"];\r\n    setTotalPages(getPagesCount(totalCount, limit));\r\n  });\r\n  useObserver(lastElement,page<totalPages,isPostsLoading,()=>{\r\n    setPage(page+1)\r\n  })\r\n  let createPost = (newPost: PostType) => {\r\n    setPosts([newPost, ...posts]);\r\n  };\r\n  useEffect(() => {\r\n    //@ts-ignore\r\n    fetchPosts().then(res=>res);\r\n  }, [page,limit]);\r\n  let removePost = (thisPost: PostType) => {\r\n    setPosts(posts.filter((post) => post.id !== thisPost.id));\r\n  };\r\n  return (\r\n    <div className=\"App\">\r\n      {activeModal ? (\r\n        <MyModal active={activeModal} setActive={setActiveModal}>\r\n          <PostForm setActive={setActiveModal} createPost={createPost} />\r\n        </MyModal>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      <PostFilter filter={filter} setFilter={setFilter} />\r\n      <MyButton\r\n        onClick={() => {\r\n          setActiveModal(true);\r\n        }}\r\n      >\r\n        Create Post\r\n      </MyButton>\r\n      {error && <h2 style={{ color: \"red\" }}>Произошла ошибка {error}</h2>}\r\n      \r\n      {isPostsLoading ? (\r\n        <Loader />\r\n      ) : (\r\n       <div><PostList\r\n          removePost={removePost}\r\n          posts={sortedPosts}\r\n          title=\"Список ЯП\"\r\n        /> <div ref={lastElement} style={{height: '20px', backgroundColor:'white'}}/></div> \r\n      )}\r\n      \r\n            <Pagination totalPages={totalPages} page={page} setPage={setPage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Posts;\r\n","import {useEffect, useRef} from \"react\";\r\n\r\nexport const useObserver = (ref: any, canLoad: boolean, isLoading: any, callback: Function) => {\r\n    const observer = useRef<IntersectionObserver>()\r\n\r\n    useEffect(() => {\r\n        if (isLoading) return\r\n        //     if(observer.current) {\r\n        //     observer.current.disconnect();\r\n        // }\r\n        var cb = function (entries: any) {\r\n            if (entries[0].isIntersecting && canLoad) {\r\n                callback()\r\n            }\r\n        };\r\n        if (observer.current) {\r\n            observer.current = new IntersectionObserver(cb);\r\n        }\r\n        if (observer.current) {\r\n            observer.current.observe(ref.current)\r\n        }\r\n    }, [isLoading])\r\n}","import { NavLink } from \"react-router-dom\"\r\n\r\nconst style = require('./Navbar.module.css')\r\n\r\nexport const Navbar = () =>{\r\n    return <div className={style.navbar}>\r\n        <NavLink to='/about'>About</NavLink>\r\n        <br/>\r\n        <NavLink to='/posts' >Posts</NavLink>\r\n    </div>\r\n}","export const About = () => {\r\n    return <h1 style={{textAlign:'center'}}>Это приложение называется Посты</h1>\r\n}","const style = require('./Error.module.css')\r\n\r\nconst ErrorSite = () => {\r\n    return <div className={style.error}> \r\n    <h1>Error,страница не найдена</h1>\r\n    <img  src={'https://www.seekpng.com/png/full/360-3605845_dog-holding-paper-in-mouth.png'} />\r\n    </div>\r\n}\r\nexport default ErrorSite","import React from \"react\";\r\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\r\nimport PostPageId from \"../Posts/PostList/PostsItem/PostPageId/PostPageId\";\r\nimport Posts from \"../Posts/Posts\";\r\nimport { Navbar } from \"../UI/Navbar/Navbar\";\r\nimport { About } from \"./About\";\r\nimport ErrorSite from \"./Error\";\r\n\r\nconst AppRouter = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Navbar />\r\n      <Switch>\r\n        <Route path=\"/about\">\r\n          <About />\r\n        </Route>\r\n        <Route exact path=\"/posts\">\r\n          <Posts />\r\n        </Route>\r\n        <Route exact path=\"/posts/:id\">\r\n          <PostPageId />\r\n        </Route>\r\n        <Route path=\"/error\">\r\n          <ErrorSite />\r\n        </Route>\r\n        <Redirect to=\"/error\" />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n};\r\nexport default AppRouter;\r\n","import React from \"react\"\r\nimport AppRouter from \"./AppRouter\"\r\n\r\nconst App = () =>{\r\nreturn <AppRouter/> \r\n}\r\nexport default App","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}